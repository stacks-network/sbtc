syntax = "proto3";

package stacks.signer.v1;

import "bitcoin/bitcoin.proto";
import "crypto/common.proto";
import "stacks/common.proto";
import "stacks/signer/v1/common.proto";

// Represents a request to sign a Stacks transaction.
message StacksTransactionSignRequest {
  // This is the bitcoin aggregate key that was output from DKG. It is used
  // to identify the signing set for the transaction.
  crypto.PublicKey aggregate_key = 1;
  // The nonce to use for the transaction.
  uint64 nonce = 2;
  // The transaction fee in microSTX.
  uint64 tx_fee = 3;
  // The transaction ID of the associated contract call transaction.
  StacksTxid txid = 4;
  // The contract transaction to sign.
  oneof contract_tx {
    // The `complete-deposit` contract call
    CompleteDeposit complete_deposit = 5;
    // The `accept-withdrawal-request` contract call
    AcceptWithdrawal accept_withdrawal = 6;
    // The `reject-withdrawal-request` contract call
    RejectWithdrawal reject_withdrawal = 7;
    // The `rotate-keys-wrapper` contract call
    RotateKeys rotate_keys = 8;
    // Ssmart contract deployment
    SmartContract smart_contract = 9;
  }
}

enum SmartContract {
  SMART_CONTRACT_UNSPECIFIED = 0;
  // The sbtc-registry contract. This contract needs to be deployed
  // before any other contract.
  SMART_CONTRACT_SBTC_REGISTRY = 1;
  // The sbtc-token contract. This contract needs to be deployed right
  // after the sbtc-registry contract.
  SMART_CONTRACT_SBTC_TOKEN = 2;
  // The sbtc-deposit contract. Can be deployed after the sbtc-token
  // contract.
  SMART_CONTRACT_SBTC_DEPOSIT = 3;
  // The sbtc-withdrawal contract. Can be deployed after the sbtc-token
  // contract.
  SMART_CONTRACT_SBTC_WITHDRAWAL = 4;
  // The sbtc-bootstrap-signers contract. Can be deployed after the
  // sbtc-token contract.
  SMART_CONTRACT_SBTC_BOOTSTRAP = 5;
}

// For making a `complete-deposit` contract call in the sbtc-deposit
// smart contract.
message CompleteDeposit {
  // The outpoint of the bitcoin UTXO that was spent as a deposit for
  // sBTC.
  bitcoin.OutPoint outpoint = 1;
  // The amount of sats swept in by the signers when they moved in the
  // above UTXO.
  uint64 amount = 2;
  // The address where the newly minted sBTC will be deposited.
  stacks.StacksPrincipal recipient = 3;
  // The address that deployed the sBTC smart contract containing the
  // complete-deposit contract call.
  stacks.StacksAddress deployer = 4;
  // The transaction ID for the sweep transaction that moved the deposit
  // UTXO into the signers' UTXO. One of the inputs to the sweep
  // transaction must be the above `outpoint`.
  bitcoin.BitcoinTxid sweep_txid = 5;
  // The block hash of the bitcoin block that contains a sweep
  // transaction with the above `outpoint` as one of its inputs.
  bitcoin.BitcoinBlockHash sweep_block_hash = 6;
  // The block height associated with the above bitcoin block hash.
  uint64 sweep_block_height = 7;
}

// For making a `accept-withdrawal-request` contract call in the
// sbtc-withdrawal smart contract.
message AcceptWithdrawal {
  // The ID of the withdrawal request generated by the
  // `initiate-withdrawal-request` function in the sbtc-withdrawal smart
  // contract along with the transaction ID for the generating transaction
  // and block hash of the block that confirmed it.
  QualifiedRequestId id = 1;
  // The outpoint of the bitcoin UTXO that was spent to fulfill the
  // withdrawal request.
  bitcoin.OutPoint outpoint = 2;
  // This is the assessed transaction fee for fulfilling the withdrawal
  // request.
  uint64 tx_fee = 3;
  // A bitmap of how the signers voted. The length of the list must be less
  // than or equal to 128. Here, we assume that a true implies that the
  // associated signer voted *against* the withdrawal.
  repeated bool signer_bitmap = 4;
  // The address that deployed the contract.
  stacks.StacksAddress deployer = 5;
  // The block hash of the bitcoin block that contains a sweep
  // transaction with the above `outpoint` as one of its outputs.
  bitcoin.BitcoinBlockHash sweep_block_hash = 6;
  // The block height associated with the above bitcoin block hash.
  uint64 sweep_block_height = 7;
}

// For making a `reject-withdrawal-request` contract call in the
// sbtc-withdrawal smart contract.
message RejectWithdrawal {
  // The ID of the withdrawal request generated by the
  // `initiate-withdrawal-request` function in the sbtc-withdrawal smart
  // contract along with the transaction ID for the generating transaction
  // and block hash of the block that confirmed it.
  QualifiedRequestId id = 1;
  // A bitmap of how the signers voted. The length of the list must be less
  // than or equal to 128. Here, we assume that a true implies that the
  // associated signer voted *against* the withdrawal.
  repeated bool signer_bitmap = 2;
  // The address that deployed the smart contract.
  stacks.StacksAddress deployer = 3;
}

// For making a `rotate-keys-wrapper` contract call in the
// `sbtc-bootstrap-signers` smart contract.
message RotateKeys {
  // The new set of public keys for all known signers during this
  // PoX cycle.
  repeated crypto.PublicKey new_keys = 1;
  // The aggregate key created by combining the above public keys.
  crypto.PublicKey aggregate_key = 2;
  // The address that deployed the contract.
  stacks.StacksAddress deployer = 3;
  // The number of signatures required for the multi-sig wallet.
  uint32 signatures_required = 4;
}
