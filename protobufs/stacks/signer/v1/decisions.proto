syntax = "proto3";

package stacks.signer.v1;

import "bitcoin/bitcoin.proto";
import "crypto/common.proto";
import "stacks/common.proto";

// Represents a decision to accept or reject a deposit request.
message SignerDepositDecision {
  // The bitcoin outpoint that uniquely identifies the deposit request.
  bitcoin.OutPoint outpoint = 1;
  // This specifies whether the sending signer's blocklist client blocked
  // the deposit request. `true` here means the blocklist client did not
  // block the request.
  bool can_accept = 2;
  // This specifies whether the sending signer can provide signature shares
  // for the associated deposit request.
  bool can_sign = 3;
}

// Represents a decision to accept or reject a withdrawal request.
message SignerWithdrawalDecision {
  // ID of the withdraw request.
  uint64 request_id = 1;
  // The Stacks block ID of the Stacks block containing the request. It
  // must be 32 bytes.
  stacks.StacksBlockId block_id = 2;
  // The stacks transaction ID that lead to the creation of the
  // withdrawal request.
  stacks.StacksTxid txid = 3;
  // Whether or not the signer has accepted the withdrawal request.
  bool accepted = 4;
}

// Represents a signature of a Stacks transaction.
message StacksTransactionSignature {
  // Id of the signed transaction.
  stacks.StacksTxid txid = 1;
  // A recoverable ECDSA signature over the transaction.
  crypto.RecoverableSignature signature = 2;
}
